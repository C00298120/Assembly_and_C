00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 28/02/2025 09:54:53

00000000                             1  
00000000                             2    *-----------------------------------------------------------
00000000                             3  * Title      : Game Starter Kit
00000000                             4  * Written by : Lloyd Prendergast
00000000                             5  * Date       : 26/02/2025
00000000                             6  * Description: Project Starter Kit 
00000000                             7  *-----------------------------------------------------------
00001000                             8      ORG    $1000
00001000                             9  START:                  ; first instruction of program
00001000                            10  
00001000                            11    ; Initialize game data
00001000  6100 000A                 12      BSR     STARTER_SCREEN          ; Initialize game data
00001004                            13  
00001004                            14      ; Display starter screen
00001004  6100 00C2                 15      BSR     INITIALISE      ; Display the starter screen
00001008                            16  
00001008                            17      ; Enter the game loop
00001008  6000 0176                 18      BRA     GAMELOOP                ; Start the game loop
0000100C                            19  *-----------------------------------------------------------
0000100C                            20  * Subroutine    : Starter Screen
0000100C                            21  * Description   : Display a starter screen with instructions
0000100C                            22  *-----------------------------------------------------------
0000100C                            23  STARTER_SCREEN:
0000100C                            24      ; Clear the screen
0000100C  103C 000B                 25      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001010  323C FF00                 26      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00001014  4E4F                      27      TRAP    #15                     ; Trap (Perform action)
00001016                            28  
00001016                            29      ; Display starter screen message
00001016  103C 000B                 30      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000101A  323C 1300                 31      MOVE.W  #$1300,     D1          ; Col 06, Row 02
0000101E  4E4F                      32      TRAP    #15                     ; Trap (Perform action)
00001020  43F9 0000162D             33      LEA     STARTER_MSG,  A1        ; Starter Screen Message
00001026  303C 000D                 34      MOVE    #13,        D0          ; No Line feed
0000102A  4E4F                      35      TRAP    #15                     ; Trap (Perform action)
0000102C                            36  
0000102C                            37      ; Display instructions
0000102C  103C 000B                 38      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001030  323C 1104                 39      MOVE.W  #$1104,     D1          ; Col 03, Row 04
00001034  4E4F                      40      TRAP    #15                     ; Trap (Perform action)
00001036  43F9 0000164A             41      LEA     INSTRUCTION_1, A1       ; Instruction 1
0000103C  303C 000D                 42      MOVE    #13,        D0          ; No Line feed
00001040  4E4F                      43      TRAP    #15                     ; Trap (Perform action)
00001042                            44  
00001042  103C 000B                 45      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001046  323C 1105                 46      MOVE.W  #$1105,     D1          ; Col 03, Row 05
0000104A  4E4F                      47      TRAP    #15                     ; Trap (Perform action)
0000104C  43F9 00001683             48      LEA     INSTRUCTION_2, A1       ; Instruction 2
00001052  303C 000D                 49      MOVE    #13,        D0          ; No Line feed
00001056  4E4F                      50      TRAP    #15                     ; Trap (Perform action)
00001058                            51  
00001058  103C 000B                 52      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000105C  323C 1106                 53      MOVE.W  #$1106,     D1          ; Col 03, Row 06
00001060  4E4F                      54      TRAP    #15                     ; Trap (Perform action)
00001062  43F9 000016C5             55      LEA     INSTRUCTION_3, A1       ; Instruction 3
00001068  303C 000D                 56      MOVE    #13,        D0          ; No Line feed
0000106C  4E4F                      57      TRAP    #15                     ; Trap (Perform action)
0000106E                            58      
0000106E  103C 000B                 59      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001072  323C 1107                 60      MOVE.W  #$1107,     D1          ; Col 03, Row 06
00001076  4E4F                      61      TRAP    #15                     ; Trap (Perform action)
00001078  43F9 000016F1             62      LEA     INSTRUCTION_4, A1       ; Instruction 4
0000107E  303C 000D                 63      MOVE    #13,        D0          ; No Line feed
00001082  4E4F                      64      TRAP    #15                     ; Trap (Perform action)
00001084                            65      
00001084  103C 000B                 66      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001088  323C 1108                 67      MOVE.W  #$1108,     D1          ; Col 03, Row 06
0000108C  4E4F                      68      TRAP    #15                     ; Trap (Perform action)
0000108E  43F9 0000171F             69      LEA     INSTRUCTION_5, A1       ; Instruction 4
00001094  303C 000D                 70      MOVE    #13,        D0          ; No Line feed
00001098  4E4F                      71      TRAP    #15                     ; Trap (Perform action)
0000109A                            72      
0000109A  103C 000B                 73          MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000109E  323C 1110                 74      MOVE.W  #$1110,     D1          ; Col 03, Row 06
000010A2  4E4F                      75      TRAP    #15                     ; Trap (Perform action)
000010A4  43F9 00001742             76      LEA     INSTRUCTION_6, A1       ; Instruction 4
000010AA  303C 000D                 77      MOVE    #13,        D0          ; No Line feed
000010AE  4E4F                      78      TRAP    #15                     ; Trap (Perform action)
000010B0                            79  
000010B0                            80  
000010B0                            81  
000010B0                            82  
000010B0                            83  
000010B0                            84  
000010B0                            85      ; Wait for player to start the game
000010B0  6100 0004                 86      BSR     WAIT_FOR_START_INPUT    ; Wait for player to press a key to start the game
000010B4  4E75                      87      RTS                             ; Return to subroutine
000010B6                            88  
000010B6                            89  *-----------------------------------------------------------
000010B6                            90  * Subroutine    : Wait for Start Input
000010B6                            91  * Description   : Wait for player to press a key to start the game
000010B6                            92  *-----------------------------------------------------------
000010B6                            93  WAIT_FOR_START_INPUT:
000010B6  7200                      94      MOVE.L  #0,  D1                 ; Clear D1 register
000010B8                            95  WAIT_LOOP:
000010B8  103C 0013                 96      MOVE.B  #TC_KEYCODE, D0         ; Listen for Keys
000010BC  4E4F                      97      TRAP    #15                      ; Trap (Perform action)
000010BE  1401                      98      MOVE.B  D1, D2                   ; Move last key to D2
000010C0  B43C 0000                 99      CMP.B   #00, D2                  ; Check if a key is pressed
000010C4  67F2                     100      BEQ     WAIT_LOOP                ; If not pressed, wait again
000010C6  4E75                     101      RTS                              ; If pressed, return
000010C8                           102  *-----------------------------------------------------------
000010C8                           103  * Section       : Trap Codes
000010C8                           104  * Description   : Trap Codes used throughout StarterKit
000010C8                           105  *-----------------------------------------------------------
000010C8                           106  * Trap CODES
000010C8  =00000021                107  TC_SCREEN   EQU         33          ; Screen size information trap code
000010C8  =00000000                108  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
000010C8                           109                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
000010C8  =00000013                110  TC_KEYCODE  EQU         19          ; Check for pressed keys
000010C8  =0000005C                111  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
000010C8  =0000000B                112  TC_CURSR_P  EQU         11          ; Trap code cursor position
000010C8                           113  
000010C8  =00000009                114  TC_EXIT     EQU         09          ; Exit Trapcode
000010C8                           115  
000010C8                           116  *-----------------------------------------------------------
000010C8                           117  * Section       : Charater Setup
000010C8                           118  * Description   : Size of Player and Enemy and properties
000010C8                           119  * of these characters e.g Starting Positions and Sizes
000010C8                           120  *-----------------------------------------------------------
000010C8  =00000014                121  PLYR_W_INIT EQU         20          ; Players initial Width
000010C8  =00000012                122  PLYR_H_INIT EQU         18          ; Players initial Height
000010C8                           123  
000010C8  =00000000                124  PLYR_DFLT_V EQU         00          ; Default Player Velocity
000010C8  =FFFFFFF0                125  PLYR_JUMP_V EQU        -16            ; Player Jump Velocity
000010C8  =00000001                126  PLYR_DFLT_G EQU         01          ; Player Default Gravity
000010C8                           127  
000010C8  =00000001                128  GND_TRUE    EQU         01          ; Player on Ground True
000010C8  =00000000                129  GND_FALSE   EQU         00          ; Player on Ground False
000010C8                           130  
000010C8  =00000000                131  RUN_INDEX   EQU         00          ; Player Run Sound Index  
000010C8  =00000001                132  JMP_INDEX   EQU         01          ; Player Jump Sound Index  
000010C8  =00000002                133  OPPS_INDEX  EQU         02          ; Player Opps Sound Index
000010C8                           134  
000010C8  =00000014                135  ENMY_W_INIT EQU         20         ; Enemy initial Width
000010C8  =00000012                136  ENMY_H_INIT EQU         18         ; Enemy initial Height
000010C8                           137  
000010C8  =00000014                138  ENMY_W_INIT2 EQU         20         ; Enemy initial Width
000010C8  =00000012                139  ENMY_H_INIT2 EQU         18         ; Enemy initial Height
000010C8                           140  
000010C8                           141  
000010C8                           142  
000010C8                           143  
000010C8                           144  
000010C8                           145  
000010C8                           146  *-----------------------------------------------------------
000010C8                           147  * Section       : Game Stats
000010C8                           148  * Description   : Points
000010C8                           149  *-----------------------------------------------------------
000010C8  =00000001                150  POINTS      EQU         01          ; Points added
000010C8                           151  
000010C8                           152  *-----------------------------------------------------------
000010C8                           153  * Section       : Keyboard Keys
000010C8                           154  * Description   : Spacebar and Escape or two functioning keys
000010C8                           155  * Spacebar to JUMP and Escape to Exit Game
000010C8                           156  *-----------------------------------------------------------
000010C8  =00000020                157  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
000010C8  =0000001B                158  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
000010C8                           159  
000010C8                           160  *-----------------------------------------------------------
000010C8                           161  * Subroutine    : Initialise
000010C8                           162  * Description   : Initialise game data into memory such as 
000010C8                           163  * sounds and screen size
000010C8                           164  *-----------------------------------------------------------
000010C8                           165  INITIALISE:
000010C8                           166      ; Initialise Sounds
000010C8  6100 02E2                167      BSR     RUN_LOAD                ; Load Run Sound into Memory
000010CC  6100 02FC                168      BSR     JUMP_LOAD               ; Load Jump Sound into Memory
000010D0  6100 0316                169      BSR     OPPS_LOAD               ; Load Opps (Collision) Sound into Memory
000010D4                           170  
000010D4                           171      ; Screen Size
000010D4  103C 0021                172      MOVE.B  #TC_SCREEN, D0          ; access screen information
000010D8  7200                     173      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
000010DA  4E4F                     174      TRAP    #15                     ; interpret D0 and D1 for screen size
000010DC  33C1 000015E0            175      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
000010E2  4841                     176      SWAP    D1                      ; Swap top and bottom word to retrive screen size
000010E4  33C1 000015DE            177      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
000010EA                           178  
000010EA                           179      ; Place the Player at the center of the screen
000010EA  4281                     180      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010EC  3239 000015DE            181      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010F2  82FC 0002                182      DIVU    #02,        D1          ; divide by 2 for center on X Axis
000010F6  23C1 000015E6            183      MOVE.L  D1,         PLAYER_X    ; Players X Position
000010FC                           184  
000010FC  4281                     185      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010FE  3239 000015E0            186      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001104  82FC 0002                187      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001108  23C1 000015EA            188      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
0000110E                           189  
0000110E                           190      ; Initialise Player Score
0000110E  4281                     191      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001110  7200                     192      MOVE.L  #00,        D1          ; Init Score
00001112  23C1 000015EE            193      MOVE.L  D1,         PLAYER_SCORE
00001118                           194  
00001118                           195      ; Initialise Player Velocity
00001118  4281                     196      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000111A  123C 0000                197      MOVE.B  #PLYR_DFLT_V,D1         ; Init Player Velocity
0000111E  23C1 000015F2            198      MOVE.L  D1,         PLYR_VELOCITY
00001124                           199  
00001124                           200      ; Initialise Player Gravity
00001124  4281                     201      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001126  7201                     202      MOVE.L  #PLYR_DFLT_G,D1         ; Init Player Gravity
00001128  23C1 000015F6            203      MOVE.L  D1,         PLYR_GRAVITY
0000112E                           204  
0000112E                           205      ; Initialize Player on Ground
0000112E  23FC 00000001 000015FA   206      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
00001138                           207  
00001138                           208      ; Initial Position for Enemy
00001138  4281                     209      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000113A  3239 000015DE            210      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001140  23C1 000015FE            211      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
00001146                           212  
00001146  4281                     213      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001148  3239 000015E0            214      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000114E  82FC 0002                215      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001152  23C1 00001602            216      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
00001158                           217      
00001158                           218  
00001158                           219      ; Enable the screen back buffer(see easy 68k help)
00001158  103C 005C                220      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
0000115C  123C 0011                221      MOVE.B  #17,        D1          ; Combine Tasks
00001160  4E4F                     222      TRAP    #15                     ; Trap (Perform action)
00001162                           223  
00001162                           224      ; Clear the screen (see easy 68k help)
00001162  103C 000B                225      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001166  323C FF00                226      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
0000116A  4E4F                     227      TRAP    #15                     ; Trap (Perform action)
0000116C                           228  
0000116C                           229  *-----------------------------------------------------------
0000116C                           230  * Subroutine    : Game
0000116C                           231  * Description   : Game including main GameLoop. GameLoop is like
0000116C                           232  * a while loop in that it runs forever until interupted
0000116C                           233  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
0000116C                           234  *-----------------------------------------------------------
0000116C                           235  
0000116C                           236  DELAY:
0000116C  203C 00000BB8            237      MOVE.L  #3000, D0
00001172                           238  
00001172                           239  DELAY_LOOP:
00001172  4E71                     240      NOP
00001174  5340                     241      SUBQ.W  #1, D0
00001176  66FA                     242      BNE.S   DELAY_LOOP
00001178  6000 0006                243      BRA     GAMELOOP
0000117C                           244  GAME:
0000117C  6100 0240                245      BSR     PLAY_RUN                ; Play Run Wav
00001180                           246                     ; Adjust this value to control the delay
00001180                           247  GAMELOOP:
00001180                           248      ; Main Gameloop
00001180  6100 0016                249      BSR     INPUT                   ; Check Keyboard Input
00001184  6100 0058                250      BSR     UPDATE                  ; Update positions and points
00001188  6100 01A4                251      BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
0000118C  6100 02E8                252      BSR     CHECK_COLLISIONS        ; Check for Collisions
00001190  6100 009E                253      BSR     DRAW
00001194  61D6                     254      BSR     DELAY
00001196  61DA                     255      BSR     DELAY_LOOP                    ; Draw the Scene
00001198                           256                      ; Loop back to GameLoop
00001198                           257      
00001198                           258     
00001198                           259  
00001198                           260  *-----------------------------------------------------------
00001198                           261  * Subroutine    : Input
00001198                           262  * Description   : Process Keyboard Input
00001198                           263  *-----------------------------------------------------------
00001198                           264  INPUT:
00001198                           265      ; Process Input
00001198  4281                     266      CLR.L   D1                      ; Clear Data Register
0000119A  103C 0013                267      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
0000119E  4E4F                     268      TRAP    #15                     ; Trap (Perform action)
000011A0  1401                     269      MOVE.B  D1,         D2          ; Move last key D1 to D2
000011A2  B43C 0000                270      CMP.B   #00,        D2          ; Key is pressed
000011A6  6700 000E                271      BEQ     PROCESS_INPUT           ; Process Key
000011AA  4E4F                     272      TRAP    #15                     ; Trap for Last Key
000011AC                           273      ; Check if key still pressed
000011AC  B23C 00FF                274      CMP.B   #$FF,       D1          ; Is it still pressed
000011B0  6700 0004                275      BEQ     PROCESS_INPUT           ; Process Last Key
000011B4  4E75                     276      RTS                             ; Return to subroutine
000011B6                           277  
000011B6                           278  *-----------------------------------------------------------
000011B6                           279  * Subroutine    : Process Input
000011B6                           280  * Description   : Branch based on keys pressed
000011B6                           281  *-----------------------------------------------------------
000011B6                           282  PROCESS_INPUT:
000011B6  23C2 000015E2            283      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
000011BC  0CB9 0000001B 000015E2   284      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
000011C6  6700 0332                285      BEQ     EXIT                    ; Exit if Escape
000011CA  0CB9 00000020 000015E2   286      CMP.L   #SPACEBAR,  CURRENT_KEY ; Is Current Key Spacebar
000011D4  6700 01AC                287      BEQ     JUMP                    ; Jump
000011D8  6000 01CC                288      BRA     IDLE                    ; Or Idle
000011DC  4E75                     289      RTS                             ; Return to subroutine
000011DE                           290      
000011DE                           291  
000011DE                           292  *-----------------------------------------------------------
000011DE                           293  * Subroutine    : Update
000011DE                           294  * Description   : Main update loop update Player and Enemies
000011DE                           295  *-----------------------------------------------------------
000011DE                           296  UPDATE:
000011DE                           297      ; Update the Players Positon based on Velocity and Gravity
000011DE  4281                     298      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011E0  2239 000015F2            299      MOVE.L  PLYR_VELOCITY, D1       ; Fetch Player Velocity
000011E6  2439 000015F6            300      MOVE.L  PLYR_GRAVITY, D2        ; Fetch Player Gravity
000011EC  D282                     301      ADD.L   D2,         D1          ; Add Gravity to Velocity
000011EE  23C1 000015F2            302      MOVE.L  D1,         PLYR_VELOCITY ; Update Player Velocity
000011F4  D2B9 000015EA            303      ADD.L   PLAYER_Y,   D1          ; Add Velocity to Player
000011FA  23C1 000015EA            304      MOVE.L  D1,         PLAYER_Y    ; Update Players Y Position 
00001200                           305  
00001200                           306      ; Move the Enemy
00001200  4281                     307      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001202  4281                     308      CLR.L   D1                      ; Clear the contents of D0
00001204  2239 000015FE            309      MOVE.L  ENEMY_X,    D1          ; Move the Enemy X Position to D0
0000120A  B2BC 00000000            310      CMP.L   #00,        D1
00001210  6F00 0010                311      BLE     RESET_ENEMY_POSITION    ; Reset Enemy if off Screen
00001214  6000 0004                312      BRA     MOVE_ENEMY              ; Move the Enemy
00001218                           313  
00001218  4E75                     314      RTS                             ; Return to subroutine  
0000121A                           315  
0000121A                           316  *-----------------------------------------------------------
0000121A                           317  * Subroutine    : Move Enemy
0000121A                           318  * Description   : Move Enemy Right to Left
0000121A                           319  *-----------------------------------------------------------
0000121A                           320  MOVE_ENEMY:
0000121A  57B9 000015FE            321      SUB.L   #03,        ENEMY_X     ; Move enemy by X Value
00001220                           322  
00001220                           323  
00001220  4E75                     324      RTS
00001222                           325  
00001222                           326  *-----------------------------------------------------------
00001222                           327  * Subroutine    : Reset Enemy
00001222                           328  * Description   : Reset Enemy if to passes 0 to Right of Screen
00001222                           329  *-----------------------------------------------------------
00001222                           330  RESET_ENEMY_POSITION:
00001222  4281                     331      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001224  3239 000015DE            332      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000122A  23C1 000015FE            333      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
00001230                           334     
00001230                           335    
00001230                           336  
00001230                           337  *-----------------------------------------------------------
00001230                           338  * Subroutine    : Draw
00001230                           339  * Description   : Draw Screen
00001230                           340  *-----------------------------------------------------------
00001230                           341  DRAW: 
00001230                           342      ; Enable back buffer
00001230  103C 005E                343      MOVE.B  #94,        D0
00001234  4E4F                     344      TRAP    #15
00001236                           345  
00001236                           346      ; Clear the screen
00001236  103C 000B                347      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000123A  323C FF00                348      MOVE.W  #$FF00,     D1          ; Clear contents
0000123E  4E4F                     349      TRAP    #15                     ; Trap (Perform action)
00001240                           350  
00001240  6100 000C                351      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
00001244  6100 01C0                352      BSR     DRAW_PLAYER             ; Draw Player
00001248  6100 01F4                353      BSR     DRAW_ENEMY
0000124C  4E75                     354      RTS                             ; Return to subroutine
0000124E                           355  
0000124E                           356  *-----------------------------------------------------------
0000124E                           357  * Subroutine    : Draw Player Data
0000124E                           358  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
0000124E                           359  *-----------------------------------------------------------
0000124E                           360  DRAW_PLYR_DATA:
0000124E  4281                     361      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001250                           362  
00001250                           363      ; Player Score Message
00001250  103C 000B                364      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001254  323C 2001                365      MOVE.W  #$2001,     D1          ; Col 20, Row 91
00001258  4E4F                     366      TRAP    #15                     ; Trap (Perform action)
0000125A  43F9 0000153C            367      LEA     SCORE_MSG,  A1          ; Score Message
00001260  303C 000D                368      MOVE    #13,        D0          ; No Line feed
00001264  4E4F                     369      TRAP    #15                     ; Trap (Perform action)
00001266                           370  
00001266                           371      ; Player Score Value
00001266  103C 000B                372      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000126A  323C 2701                373      MOVE.W  #$02701,     D1          ; Col 09, Row 01
0000126E  4E4F                     374      TRAP    #15                     ; Trap (Perform action)
00001270  103C 0003                375      MOVE.B  #03,        D0          ; Display number at D1.L
00001274  2239 000015EE            376      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
0000127A  4E4F                     377      TRAP    #15                     ; Trap (Perform action)
0000127C                           378      
0000127C                           379      ; Player X Message
0000127C  103C 000B                380      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001280  323C 0202                381      MOVE.W  #$0202,     D1          ; Col 02, Row 02
00001284  4E4F                     382      TRAP    #15                     ; Trap (Perform action)
00001286  43F9 00001560            383      LEA     X_MSG,      A1          ; X Message
0000128C  303C 000D                384      MOVE    #13,        D0          ; No Line feed
00001290  4E4F                     385      TRAP    #15                     ; Trap (Perform action)
00001292                           386      
00001292                           387      ; Player X
00001292  103C 000B                388      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
00001296  323C 0502                389      MOVE.W  #$0502,     D1          ; Col 05, Row 02
0000129A  4E4F                     390      TRAP    #15                     ; Trap (Perform action)
0000129C  103C 0003                391      MOVE.B  #03,        D0          ; Display number at D1.L
000012A0  2239 000015E6            392      MOVE.L  PLAYER_X,   D1          ; Move X to D1.L
000012A6  4E4F                     393      TRAP    #15                     ; Trap (Perform action)
000012A8                           394      
000012A8                           395      ; Player Y Message
000012A8  103C 000B                396      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012AC  323C 1002                397      MOVE.W  #$1002,     D1          ; Col 10, Row 02
000012B0  4E4F                     398      TRAP    #15                     ; Trap (Perform action)
000012B2  43F9 00001563            399      LEA     Y_MSG,      A1          ; Y Message
000012B8  303C 000D                400      MOVE    #13,        D0          ; No Line feed
000012BC  4E4F                     401      TRAP    #15                     ; Trap (Perform action)
000012BE                           402      
000012BE                           403      ; Player Y
000012BE  103C 000B                404      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012C2  323C 1202                405      MOVE.W  #$1202,     D1          ; Col 12, Row 02
000012C6  4E4F                     406      TRAP    #15                     ; Trap (Perform action)
000012C8  103C 0003                407      MOVE.B  #03,        D0          ; Display number at D1.L
000012CC  2239 000015EA            408      MOVE.L  PLAYER_Y,   D1          ; Move X to D1.L
000012D2  4E4F                     409      TRAP    #15                     ; Trap (Perform action) 
000012D4                           410  
000012D4                           411  
000012D4                           412      
000012D4                           413      
000012D4                           414      
000012D4                           415  
000012D4                           416      
000012D4                           417  
000012D4                           418  
000012D4                           419  
000012D4                           420      
000012D4                           421  
000012D4                           422      
000012D4                           423      
000012D4                           424      ; ROAD
000012D4  103C 000B                425      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012D8  323C 0111                426      MOVE.W  #$0111,     D1          ; Col 06, Row 04
000012DC  4E4F                     427      TRAP    #15                     ; Trap (Perform action)
000012DE  43F9 0000157D            428      LEA     LINE_ROAD,  A1
000012E4  303C 000D                429      MOVE    #13,        D0          ; Display number at D1.L          ; Move Play on Ground ? to D1.L
000012E8  4E4F                     430      TRAP    #15         
000012EA                           431  
000012EA                           432  
000012EA                           433  
000012EA                           434  
000012EA                           435  
000012EA                           436      ; Show if Update is Running
000012EA  103C 000B                437      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012EE  323C 0205                438      MOVE.W  #$0205,     D1          ; Col 02, Row 05
000012F2  4E4F                     439      TRAP    #15                     ; Trap (Perform action)
000012F4  43F9 0000155E            440      LEA     UPDATE_MSG, A1          ; Update
000012FA  303C 000D                441      MOVE    #13,        D0          ; No Line feed
000012FE  4E4F                     442      TRAP    #15                     ; Trap (Perform action)
00001300                           443  
00001300                           444      ; Show if Draw is Running
00001300  103C 000B                445      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001304  323C 0206                446      MOVE.W  #$0206,     D1          ; Col 02, Row 06
00001308  4E4F                     447      TRAP    #15                     ; Trap (Perform action)
0000130A  43F9 0000155F            448      LEA     DRAW_MSG,   A1          ; Draw
00001310  303C 000D                449      MOVE    #13,        D0          ; No Line feed
00001314  4E4F                     450      TRAP    #15                     ; Trap (Perform action)
00001316                           451  
00001316                           452      ; Show if Idle is Running
00001316  103C 000B                453      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000131A  323C 2107                454      MOVE.W  #$2107,     D1          ; Col 02, Row 07
0000131E  4E4F                     455      TRAP    #15                     ; Trap (Perform action)
00001320  43F9 0000154F            456      LEA     IDLE_MSG,   A1          ; Move Idle Message to A1
00001326  303C 000D                457      MOVE    #13,        D0          ; No Line feed
0000132A  4E4F                     458      TRAP    #15                     ; Trap (Perform action)
0000132C                           459  
0000132C  4E75                     460      RTS  
0000132E                           461      
0000132E                           462  *-----------------------------------------------------------
0000132E                           463  * Subroutine    : Player is on Ground
0000132E                           464  * Description   : Check if the Player is on or off Ground
0000132E                           465  *-----------------------------------------------------------
0000132E                           466  IS_PLAYER_ON_GND:
0000132E                           467      ; Check if Player is on Ground
0000132E  4281                     468      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001330  4282                     469      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
00001332  3239 000015E0            470      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001338  82FC 0002                471      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000133C  2439 000015EA            472      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
00001342  B441                     473      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
00001344  6C00 0008                474      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
00001348  6D00 002C                475      BLT     SET_OFF_GROUND          ; The Player is off the Ground
0000134C  4E75                     476      RTS                             ; Return to subroutine
0000134E                           477  
0000134E                           478  
0000134E                           479  *-----------------------------------------------------------
0000134E                           480  * Subroutine    : On Ground
0000134E                           481  * Description   : Set the Player On Ground
0000134E                           482  *-----------------------------------------------------------
0000134E                           483  SET_ON_GROUND:
0000134E  4281                     484      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001350  3239 000015E0            485      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001356  82FC 0002                486      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000135A  23C1 000015EA            487      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
00001360  4281                     488      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001362  7200                     489      MOVE.L  #00,        D1          ; Player Velocity
00001364  23C1 000015F2            490      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
0000136A  23FC 00000001 000015FA   491      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
00001374  4E75                     492      RTS
00001376                           493  
00001376                           494  *-----------------------------------------------------------
00001376                           495  * Subroutine    : Off Ground
00001376                           496  * Description   : Set the Player Off Ground
00001376                           497  *-----------------------------------------------------------
00001376                           498  SET_OFF_GROUND:
00001376  23FC 00000000 000015FA   499      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
00001380  4E75                     500      RTS                             ; Return to subroutine
00001382                           501  *-----------------------------------------------------------
00001382                           502  * Subroutine    : Jump
00001382                           503  * Description   : Perform a Jump
00001382                           504  *-----------------------------------------------------------
00001382                           505  JUMP:
00001382  0CB9 00000001 000015FA   506      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
0000138C  6700 0006                507      BEQ     PERFORM_JUMP            ; Do Jump
00001390  6000 0012                508      BRA     JUMP_DONE               ;
00001394                           509  PERFORM_JUMP:
00001394  6100 0046                510      BSR     PLAY_JUMP               ; Play jump sound
00001398  23FC FFFFFFF0 000015F2   511      MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
000013A2  4E75                     512      RTS                             ; Return to subroutine
000013A4                           513  JUMP_DONE:
000013A4  4E75                     514      RTS                             ; Return to subroutine
000013A6                           515  
000013A6                           516  *-----------------------------------------------------------
000013A6                           517  * Subroutine    : Idle
000013A6                           518  * Description   : Perform a Idle
000013A6                           519  *----------------------------------------------------------- 
000013A6                           520  IDLE:
000013A6  6100 0016                521      BSR     PLAY_RUN                ; Play Run Wav
000013AA  4E75                     522      RTS                             ; Return to subroutine
000013AC                           523  
000013AC                           524  *-----------------------------------------------------------
000013AC                           525  * Subroutines   : Sound Load and Play
000013AC                           526  * Description   : Initialise game sounds into memory 
000013AC                           527  * Current Sounds are RUN, JUMP and Opps for Collision
000013AC                           528  *-----------------------------------------------------------
000013AC                           529  RUN_LOAD:
000013AC  43F9 00001618            530      LEA     RUN_WAV,    A1          ; Load Wav File into A1
000013B2  323C 0000                531      MOVE    #RUN_INDEX, D1          ; Assign it INDEX
000013B6  303C 0047                532      MOVE    #71,        D0          ; Load into memory
000013BA  4E4F                     533      TRAP    #15                     ; Trap (Perform action)
000013BC  4E75                     534      RTS                             ; Return to subroutine
000013BE                           535  
000013BE                           536  PLAY_RUN:
000013BE  323C 0000                537      MOVE    #RUN_INDEX, D1          ; Load Sound INDEX
000013C2  303C 0048                538      MOVE    #72,        D0          ; Play Sound
000013C6  4E4F                     539      TRAP    #15                     ; Trap (Perform action)
000013C8  4E75                     540      RTS                             ; Return to subroutine
000013CA                           541  
000013CA                           542  JUMP_LOAD:
000013CA  43F9 0000160E            543      LEA     JUMP_WAV,   A1          ; Load Wav File into A1
000013D0  323C 0001                544      MOVE    #JMP_INDEX, D1          ; Assign it INDEX
000013D4  303C 0047                545      MOVE    #71,        D0          ; Load into memory
000013D8  4E4F                     546      TRAP    #15                     ; Trap (Perform action)
000013DA  4E75                     547      RTS                             ; Return to subroutine
000013DC                           548  
000013DC                           549  PLAY_JUMP:
000013DC  323C 0001                550      MOVE    #JMP_INDEX, D1          ; Load Sound INDEX
000013E0  303C 0048                551      MOVE    #72,        D0          ; Play Sound
000013E4  4E4F                     552      TRAP    #15                     ; Trap (Perform action)
000013E6  4E75                     553      RTS                             ; Return to subroutine
000013E8                           554  
000013E8                           555  OPPS_LOAD:
000013E8  43F9 00001624            556      LEA     OPPS_WAV,   A1          ; Load Wav File into A1
000013EE  323C 0002                557      MOVE    #OPPS_INDEX,D1          ; Assign it INDEX
000013F2  303C 0047                558      MOVE    #71,        D0          ; Load into memory
000013F6  4E4F                     559      TRAP    #15                     ; Trap (Perform action)
000013F8  4E75                     560      RTS                             ; Return to subroutine
000013FA                           561  
000013FA                           562  PLAY_OPPS:
000013FA  323C 0002                563      MOVE    #OPPS_INDEX,D1          ; Load Sound INDEX
000013FE  303C 0048                564      MOVE    #72,        D0          ; Play Sound
00001402  4E4F                     565      TRAP    #15                     ; Trap (Perform action)
00001404  4E75                     566      RTS                             ; Return to subroutine
00001406                           567  
00001406                           568  *-----------------------------------------------------------
00001406                           569  * Subroutine    : Draw Player
00001406                           570  * De scription   : Draw Player Square
00001406                           571  *-----------------------------------------------------------
00001406                           572  DRAW_PLAYER:
00001406                           573      ; Set Pixel Colors
00001406  223C 0062F2F3            574      MOVE.L  #YELLOW,     D1          ; Set Background color
0000140C  103C 0050                575      MOVE.B  #80,        D0          ; Task for Background Color
00001410  4E4F                     576      TRAP    #15                     ; Trap (Perform action)
00001412                           577  
00001412                           578      ; Set X, Y, Width and Height
00001412  2239 000015E6            579      MOVE.L  PLAYER_X,   D1          ; X
00001418  2439 000015EA            580      MOVE.L  PLAYER_Y,   D2          ; Y
0000141E  2639 000015E6            581      MOVE.L  PLAYER_X,   D3
00001424  0683 00000014            582      ADD.L   #PLYR_W_INIT,   D3      ; Width
0000142A  2839 000015EA            583      MOVE.L  PLAYER_Y,   D4 
00001430  0684 00000012            584      ADD.L   #PLYR_H_INIT,   D4      ; Height
00001436                           585      
00001436                           586      ; Draw Player
00001436  103C 005B                587      MOVE.B  #91,        D0          ; Draw Player
0000143A  4E4F                     588      TRAP    #15                     ; Trap (Perform action)
0000143C  4E75                     589      RTS                             ; Return to subroutine
0000143E                           590  
0000143E                           591  *-----------------------------------------------------------
0000143E                           592  * Subroutine    : Draw Enemy
0000143E                           593  * Description   : Draw Enemy Square
0000143E                           594  *-----------------------------------------------------------
0000143E                           595  DRAW_ENEMY:
0000143E                           596      ; Set Pixel Colors
0000143E  223C 00FFFF00            597      MOVE.L  #BLUE,       D1          ; Set Background color
00001444  103C 0050                598      MOVE.B  #80,        D0          ; Task for Background Color
00001448  4E4F                     599      TRAP    #15                     ; Trap (Perform action)
0000144A                           600  
0000144A                           601      ; Set X, Y, Width and Height
0000144A  2239 000015FE            602      MOVE.L  ENEMY_X,    D1          ; X
00001450  2439 00001602            603      MOVE.L  ENEMY_Y,    D2          ; Y
00001456  2639 000015FE            604      MOVE.L  ENEMY_X,    D3
0000145C  0683 00000014            605      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001462  2839 00001602            606      MOVE.L  ENEMY_Y,    D4 
00001468  0684 00000012            607      ADD.L   #ENMY_H_INIT,   D4      ; Height
0000146E                           608      
0000146E                           609      ; Draw Enemy    
0000146E  103C 0057                610      MOVE.B  #87,        D0          ; Draw Enemy
00001472  4E4F                     611      TRAP    #15                     ; Trap (Perform action)
00001474  4E75                     612      RTS                             ; Return to subroutine
00001476                           613      
00001476                           614   
00001476                           615  
00001476                           616  *-----------------------------------------------------------
00001476                           617  * Subroutine    : Collision Check
00001476                           618  * Description   : Axis-Aligned Bounding Box Collision Detection
00001476                           619  * Algorithm checks for overlap on the 4 sides of the Player and 
00001476                           620  * Enemy rectangles
00001476                           621  * PLAYER_X <= ENEMY_X + ENEMY_W &&
00001476                           622  * PLAYER_X + PLAYER_W >= ENEMY_X &&
00001476                           623  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
00001476                           624  * PLAYER_H + PLAYER_Y >= ENEMY_Y
00001476                           625  *-----------------------------------------------------------
00001476                           626  CHECK_COLLISIONS:
00001476  4281                     627      CLR.L   D1                      ; Clear D1
00001478  4282                     628      CLR.L   D2                      ; Clear D2
0000147A                           629  PLAYER_X_LTE_TO_ENEMY_X_PLUS_W:
0000147A  2239 000015E6            630      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001480  2439 000015FE            631      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00001486  D4B8 0014                632      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000148A  B481                     633      CMP.L   D1,         D2          ; Do the Overlap ?
0000148C  6F00 0006                634      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  ; Less than or Equal ?
00001490  6000 0044                635      BRA     COLLISION_CHECK_DONE    
00001494                           636  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X:     ; Check player is not  
00001494  D2B8 0014                637      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001498  2439 000015FE            638      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
0000149E  B481                     639      CMP.L   D1,         D2          ; Do they OverLap ?
000014A0  6C00 0006                640      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
000014A4  6000 0030                641      BRA     COLLISION_CHECK_DONE    ; If not no collision   
000014A8                           642  PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H:     
000014A8  2239 000015EA            643      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
000014AE  2439 00001602            644      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
000014B4  D4B8 0012                645      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
000014B8  B481                     646      CMP.L   D1,         D2          ; Do they Overlap ?
000014BA  6F00 0006                647      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  ; Less than or Equal
000014BE  6000 0016                648      BRA     COLLISION_CHECK_DONE    ; If not no collision 
000014C2                           649  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
000014C2  D2B8 0012                650      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
000014C6  2439 00001602            651      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
000014CC  B481                     652      CMP.L   D1,         D2          ; Do they OverLap ?
000014CE  6C00 0016                653      BGE     COLLISION               ; Collision !
000014D2  6000 0002                654      BRA     COLLISION_CHECK_DONE    ; If not no collision
000014D6                           655      
000014D6                           656  COLLISION_CHECK_DONE:               ; No Collision Update points
000014D6  5281                     657      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
000014D8  D2B9 000015EE            658      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
000014DE  23C1 000015EE            659      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
000014E4  4E75                     660      RTS                             ; Return to subroutine
000014E6                           661  
000014E6                           662  COLLISION:
000014E6  6100 FF12                663      BSR     PLAY_OPPS               ; Play Opps Wav
000014EA  23FC 00000000 000015EE   664      MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
000014F4  6100 0020                665      BSR     END_GAME
000014F8  4E75                     666      RTS                             ; Return to subroutine
000014FA                           667  
000014FA                           668  
000014FA                           669  *-----------------------------------------------------------
000014FA                           670  * Subroutine    : EXIT
000014FA                           671  * Description   : Exit message and End Game
000014FA                           672  *----------------------------------------------------------
000014FA                           673  
000014FA                           674  
000014FA                           675  
000014FA                           676  EXIT:
000014FA                           677      ; Show if Exiting is Running
000014FA  103C 000B                678      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000014FE  323C 4004                679      MOVE.W  #$4004,     D1          ; Col 40, Row 1
00001502  4E4F                     680      TRAP    #15                     ; Trap (Perform action)
00001504  43F9 00001571            681      LEA     EXIT_MSG,   A1          ; Exit
0000150A  303C 000D                682      MOVE    #13,        D0          ; No Line feed
0000150E  4E4F                     683      TRAP    #15                     ; Trap (Perform action)
00001510  103C 0009                684      MOVE.B  #TC_EXIT,   D0          ; Exit Code
00001514  4E4F                     685      TRAP    #15                     ; Trap (Perform action)
00001516                           686      
00001516                           687  END_GAME:
00001516                           688      ; Add logic to end the game, such as displaying an end game message and halting the processor
00001516                           689      ; You can include the same logic as in the EXIT subroutine to display an exit message and halt the processor
00001516                           690      ; Example:
00001516  6100 0008                691      BSR     DISPLAY_END_GAME_MESSAGE
0000151A  103C 0009                692      MOVE.B  #TC_EXIT,   D0          ; Exit Code
0000151E  4E4F                     693      TRAP    #15                     ; Trap (Perform action)
00001520                           694      
00001520                           695      
00001520                           696  DISPLAY_END_GAME_MESSAGE:
00001520                           697      ; Add logic to display an end game message
00001520                           698      ; You can display a message indicating the game has ended due to a collision
00001520                           699      ; Example:
00001520  103C 000B                700      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001524  323C 4004                701      MOVE.W  #$4004,     D1          ; Col 40, Row 1
00001528  4E4F                     702      TRAP    #15                     ; Trap (Perform action)
0000152A  43F9 00001769            703      LEA     END_GAME_MSG,   A1      ; End Game Message
00001530  303C 000D                704      MOVE    #13,        D0          ; No Line feed
00001534  4E4F                     705      TRAP    #15                     ; Trap (Perform action)
00001536  4E75                     706      RTS
00001538  FFFF FFFF                707      SIMHALT
0000153C                           708  *-----------------------------------------------------------
0000153C                           709  * Section       : Messages
0000153C                           710  * Description   : Messages to Print on Console, names should be
0000153C                           711  * self documenting
0000153C                           712  *-----------------------------------------------------------
0000153C= 53 63 6F 72 65 20 ...    713  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
00001545= 00                       714  KEYCODE_MSG     DC.B    '', 0     ; Keycode Message
00001546= 4A 75 6D 70 2E 2E ...    715  JUMP_MSG        DC.B    'Jump....', 0       ; Jump Message
0000154F                           716  
0000154F= 44 6F 6E 74 20 43 ...    717  IDLE_MSG        DC.B    'Dont Crash lol', 0       ; Idle Message
0000155E= 00                       718  UPDATE_MSG      DC.B    '', 0     ; Update Message
0000155F= 00                       719  DRAW_MSG        DC.B    '', 0       ; Draw Message
00001560                           720  
00001560= 58 3A 00                 721  X_MSG           DC.B    'X:', 0             ; X Position Message
00001563= 59 3A 00                 722  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
00001566= 56 3A 00                 723  V_MSG           DC.B    'V:', 0             ; Velocity Position Message
00001569= 47 3A 00                 724  G_MSG           DC.B    'G:', 0             ; Gravity Position Message
0000156C= 47 4E 44 3A 00           725  GND_MSG         DC.B    'GND:', 0           ; On Ground Position Message
00001571                           726  
00001571= 55 6E 6C 75 63 6B ...    727  EXIT_MSG        DC.B    'Unluckyyyyy', 0    ; Exit Message
0000157D= 5A 5A 5A 5A 5A 5A ...    728  LINE_ROAD       DC.B    'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ',0
000015DE                           729  
000015DE                           730  *-----------------------------------------------------------
000015DE                           731  * Section       : Graphic Colors
000015DE                           732  * Description   : Screen Pixel Color
000015DE                           733  *-----------------------------------------------------------
000015DE  =0062F2F3                734  YELLOW           EQU     $62f2f3
000015DE  =00FFFF00                735  BLUE             EQU     $FFFF00
000015DE                           736  
000015DE                           737  *-----------------------------------------------------------
000015DE                           738  * Section       : Screen Size
000015DE                           739  * Description   : Screen Width and Height
000015DE                           740  *-----------------------------------------------------------
000015DE                           741  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
000015E0                           742  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
000015E2                           743  
000015E2                           744  *-----------------------------------------------------------
000015E2                           745  * Section       : Keyboard Input
000015E2                           746  * Description   : Used for storing Keypresses
000015E2                           747  *-----------------------------------------------------------
000015E2                           748  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
000015E6                           749  
000015E6                           750  *-----------------------------------------------------------
000015E6                           751  * Section       : Character Positions
000015E6                           752  * Description   : Player and Enemy Position Memory Locations
000015E6                           753  *-----------------------------------------------------------
000015E6                           754  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
000015EA                           755  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
000015EE                           756  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
000015F2                           757  
000015F2                           758  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
000015F6                           759  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
000015FA                           760  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
000015FE                           761  
000015FE                           762  ENEMY_X         DS.L    01  ; Reserve Space for Enemy X Position
00001602                           763  ENEMY_Y         DS.L    01  ; Reserve Space for Enemy Y Position
00001606                           764  
00001606                           765  ENEMY_X2         DS.L    01  ; Reserve Space for Enemy X Position
0000160A                           766  ENEMY_Y2         DS.L    01  ; Reserve Space for Enemy Y Position
0000160E                           767  
0000160E                           768  
0000160E                           769  *-----------------------------------------------------------
0000160E                           770  * Section       : Sounds
0000160E                           771  * Description   : Sound files, which are then loaded and given
0000160E                           772  * an address in memory, they take a longtime to process and play
0000160E                           773  * so keep the files small. Used https://voicemaker.in/ to 
0000160E                           774  * generate and Audacity to convert MP3 to WAV
0000160E                           775  *-----------------------------------------------------------
0000160E= 73 6F 75 6E 64 2E ...    776  JUMP_WAV        DC.B    'sound.wav',0        ; Jump Sound
00001618= 73 6E 6F 72 69 6E ...    777  RUN_WAV         DC.B    'snoring.wav',0         ; Run Sound
00001624= 4F 4F 4F 46 2E 77 ...    778  OPPS_WAV        DC.B    'OOOF.wav',0        ; Collision Opps
0000162D                           779  
0000162D                           780  
0000162D                           781  *-----------------------------------------------------------
0000162D                           782  * Section       : Messages
0000162D                           783  * Description   : Messages to Print on Console, names should be
0000162D                           784  * self documenting
0000162D                           785  *-----------------------------------------------------------
0000162D= 2D 2D 2D 2D 2D 57 ...    786  STARTER_MSG      DC.B    '-----Welcome to my game!----', 0   ; Starter Screen Message
0000164A= 2D 2D 50 72 65 73 ...    787  INSTRUCTION_1    DC.B    '--Press the spacebar to jump and the escape to exit.----', 0   ; Instruction 1
00001683= 2D 2D 2D 2D 54 72 ...    788  INSTRUCTION_2    DC.B    '----Try to avoid the obstacles and see how far you can get to!---', 0   ; Instruction 2
000016C5= 2D 2D 2D 2D 50 72 ...    789  INSTRUCTION_3    DC.B    '----Press any key to start the game.-------', 0   ; Instruction 3
000016F1= 2D 2D 2D 50 52 45 ...    790  INSTRUCTION_4    DC.B    '---PRESS ANY KEY OTHER THAN SPACE FOR MUSIC--',0  ; Instruction 4
0000171F= 2D 2D 42 65 73 74 ...    791  INSTRUCTION_5    DC.B    '--Best of luck, you will need it--',0 ; Instruction 5
00001742= 2D 2D 50 72 65 73 ...    792  INSTRUCTION_6    DC.B    '--Press any key to start the game.----', 0   ; Instruction 6
00001769                           793   
00001769                           794  
00001769= 47 61 6D 65 20 4F ...    795  END_GAME_MSG     DC.B    'Game Over, try again next time - Collision Detected', 0    ; End Game Message
0000179D                           796      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BLUE                FFFF00
CHECK_COLLISIONS    1476
COLLISION           14E6
COLLISION_CHECK_DONE  14D6
CURRENT_KEY         15E2
DELAY               116C
DELAY_LOOP          1172
DISPLAY_END_GAME_MESSAGE  1520
DRAW                1230
DRAW_ENEMY          143E
DRAW_MSG            155F
DRAW_PLAYER         1406
DRAW_PLYR_DATA      124E
END_GAME            1516
END_GAME_MSG        1769
ENEMY_X             15FE
ENEMY_X2            1606
ENEMY_Y             1602
ENEMY_Y2            160A
ENMY_H_INIT         12
ENMY_H_INIT2        12
ENMY_W_INIT         14
ENMY_W_INIT2        14
ESCAPE              1B
EXIT                14FA
EXIT_MSG            1571
GAME                117C
GAMELOOP            1180
GND_FALSE           0
GND_MSG             156C
GND_TRUE            1
G_MSG               1569
IDLE                13A6
IDLE_MSG            154F
INITIALISE          10C8
INPUT               1198
INSTRUCTION_1       164A
INSTRUCTION_2       1683
INSTRUCTION_3       16C5
INSTRUCTION_4       16F1
INSTRUCTION_5       171F
INSTRUCTION_6       1742
IS_PLAYER_ON_GND    132E
JMP_INDEX           1
JUMP                1382
JUMP_DONE           13A4
JUMP_LOAD           13CA
JUMP_MSG            1546
JUMP_WAV            160E
KEYCODE_MSG         1545
LINE_ROAD           157D
MOVE_ENEMY          121A
OPPS_INDEX          2
OPPS_LOAD           13E8
OPPS_WAV            1624
PERFORM_JUMP        1394
PLAYER_SCORE        15EE
PLAYER_X            15E6
PLAYER_X_LTE_TO_ENEMY_X_PLUS_W  147A
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  1494
PLAYER_Y            15EA
PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  14A8
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  14C2
PLAY_JUMP           13DC
PLAY_OPPS           13FA
PLAY_RUN            13BE
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        15F6
PLYR_H_INIT         12
PLYR_JUMP_V         FFFFFFF0
PLYR_ON_GND         15FA
PLYR_VELOCITY       15F2
PLYR_W_INIT         14
POINTS              1
PROCESS_INPUT       11B6
RESET_ENEMY_POSITION  1222
RUN_INDEX           0
RUN_LOAD            13AC
RUN_WAV             1618
SCORE_MSG           153C
SCREEN_H            15E0
SCREEN_W            15DE
SET_OFF_GROUND      1376
SET_ON_GROUND       134E
SPACEBAR            20
START               1000
STARTER_MSG         162D
STARTER_SCREEN      100C
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
UPDATE              11DE
UPDATE_MSG          155E
V_MSG               1566
WAIT_FOR_START_INPUT  10B6
WAIT_LOOP           10B8
X_MSG               1560
YELLOW              62F2F3
Y_MSG               1563
