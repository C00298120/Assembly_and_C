00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 26/02/2025 18:08:28

00000000                             1  
00000000                             2  *-----------------------------------------------------------
00000000                             3  * Title      : Game Starter Kit
00000000                             4  * Written by : Lloyd Prendergast
00000000                             5  * Date       : 26/02/2025
00000000                             6  * Description: Project Starter Kit 
00000000                             7  *-----------------------------------------------------------
00001000                             8      ORG    $1000
00001000                             9  START:                  ; first instruction of program
00001000                            10  
00001000                            11    ; Initialize game data
00001000  6100 000A                 12      BSR     STARTER_SCREEN          ; Initialize game data
00001004                            13  
00001004                            14      ; Display starter screen
Line 15 ERROR: Undefined symbol
00001004  6100 AD10                 15      BSR     INITIALISE      ; Display the starter screen
00001008                            16  
00001008                            17      ; Enter the game loop
Line 18 ERROR: Undefined symbol
00001008  6000 AD0C                 18      BRA     GAMELOOP                ; Start the game loop
0000100C                            19  *-----------------------------------------------------------
0000100C                            20  * Subroutine    : Starter Screen
0000100C                            21  * Description   : Display a starter screen with instructions
0000100C                            22  *-----------------------------------------------------------
0000100C                            23  STARTER_SCREEN:
0000100C                            24      ; Clear the screen
0000100C  103C 000B                 25      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001010  323C FF00                 26      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00001014  4E4F                      27      TRAP    #15                     ; Trap (Perform action)
00001016                            28  
00001016                            29      ; Display starter screen message
00001016  103C 000B                 30      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000101A  323C 1300                 31      MOVE.W  #$1300,     D1          ; Col 06, Row 02
0000101E  4E4F                      32      TRAP    #15                     ; Trap (Perform action)
00001020  43F9 000012F7             33      LEA     STARTER_MSG,  A1        ; Starter Screen Message
00001026  303C 000D                 34      MOVE    #13,        D0          ; No Line feed
0000102A  4E4F                      35      TRAP    #15                     ; Trap (Perform action)
0000102C                            36  
0000102C                            37      ; Display instructions
0000102C  103C 000B                 38      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001030  323C 1104                 39      MOVE.W  #$1104,     D1          ; Col 03, Row 04
00001034  4E4F                      40      TRAP    #15                     ; Trap (Perform action)
00001036  43F9 00001314             41      LEA     INSTRUCTION_1, A1       ; Instruction 1
0000103C  303C 000D                 42      MOVE    #13,        D0          ; No Line feed
00001040  4E4F                      43      TRAP    #15                     ; Trap (Perform action)
00001042                            44  
00001042  103C 000B                 45      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001046  323C 1105                 46      MOVE.W  #$1105,     D1          ; Col 03, Row 05
0000104A  4E4F                      47      TRAP    #15                     ; Trap (Perform action)
0000104C  43F9 00001349             48      LEA     INSTRUCTION_2, A1       ; Instruction 2
00001052  303C 000D                 49      MOVE    #13,        D0          ; No Line feed
00001056  4E4F                      50      TRAP    #15                     ; Trap (Perform action)
00001058                            51  
00001058  103C 000B                 52      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000105C  323C 1106                 53      MOVE.W  #$1106,     D1          ; Col 03, Row 06
00001060  4E4F                      54      TRAP    #15                     ; Trap (Perform action)
00001062  43F9 00001379             55      LEA     INSTRUCTION_3, A1       ; Instruction 3
00001068  303C 000D                 56      MOVE    #13,        D0          ; No Line feed
0000106C  4E4F                      57      TRAP    #15                     ; Trap (Perform action)
0000106E                            58      
0000106E  103C 000B                 59      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001072  323C 1107                 60      MOVE.W  #$1107,     D1          ; Col 03, Row 06
00001076  4E4F                      61      TRAP    #15                     ; Trap (Perform action)
00001078  43F9 000013A5             62      LEA     INSTRUCTION_4, A1       ; Instruction 4
0000107E  303C 000D                 63      MOVE    #13,        D0          ; No Line feed
00001082  4E4F                      64      TRAP    #15                     ; Trap (Perform action)
00001084                            65      
00001084  103C 000B                 66      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001088  323C 1108                 67      MOVE.W  #$1108,     D1          ; Col 03, Row 06
0000108C  4E4F                      68      TRAP    #15                     ; Trap (Perform action)
0000108E  43F9 000013D3             69      LEA     INSTRUCTION_5, A1       ; Instruction 4
00001094  303C 000D                 70      MOVE    #13,        D0          ; No Line feed
00001098  4E4F                      71      TRAP    #15                     ; Trap (Perform action)
0000109A                            72      
0000109A  103C 000B                 73          MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000109E  323C 1110                 74      MOVE.W  #$1110,     D1          ; Col 03, Row 06
000010A2  4E4F                      75      TRAP    #15                     ; Trap (Perform action)
000010A4  43F9 000013A5             76      LEA     INSTRUCTION_4, A1       ; Instruction 4
000010AA  303C 000D                 77      MOVE    #13,        D0          ; No Line feed
000010AE  4E4F                      78      TRAP    #15                     ; Trap (Perform action)
000010B0                            79  
000010B0                            80      ; Wait for player to start the game
Line 81 ERROR: Undefined symbol
000010B0  6100 AC64                 81      BSR     WAIT_FOR_START_INPUT    ; Wait for player to press a key to start the game
000010B4  4E75                      82      RTS                             ; Return to subroutine
000010B6                            83  
000010B6                            84  *-----------------------------------------------------------
000010B6                            85  * Subroutine    : Wait for Start Input
000010B6                            86  * Description   : Wait for player to press a key to start the game
000010B6                            87  *-----------------------------------------------------------
Line 88 ERROR: Invalid syntax
000010B6                            88  WAIT_FOR_START_INPUT ```assembly
000010B6  7200                      89      MOVE.L  #0,  D1                 ; Clear D1 register
000010B8                            90  WAIT_LOOP:
000010B8  103C 0013                 91      MOVE.B  #TC_KEYCODE, D0         ; Listen for Keys
000010BC  4E4F                      92      TRAP    #15                      ; Trap (Perform action)
000010BE  1401                      93      MOVE.B  D1, D2                   ; Move last key to D2
000010C0  B43C 0000                 94      CMP.B   #00, D2                  ; Check if a key is pressed
000010C4  67F2                      95      BEQ     WAIT_LOOP                ; If not pressed, wait again
000010C6  4E75                      96      RTS                              ; If pressed, return
000010C8                            97  *-----------------------------------------------------------
000010C8                            98  * Section       : Trap Codes
000010C8                            99  * Description   : Trap Codes used throughout StarterKit
000010C8                           100  *-----------------------------------------------------------
000010C8                           101  * Trap CODES
000010C8  =00000021                102  TC_SCREEN   EQU         33          ; Screen size information trap code
000010C8  =00000000                103  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
000010C8                           104                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
000010C8  =00000013                105  TC_KEYCODE  EQU         19          ; Check for pressed keys
000010C8  =0000005C                106  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
000010C8  =0000000B                107  TC_CURSR_P  EQU         11          ; Trap code cursor position
000010C8                           108  
000010C8  =00000009                109  TC_EXIT     EQU         09          ; Exit Trapcode
000010C8                           110  
000010C8                           111  *-----------------------------------------------------------
000010C8                           112  * Section       : Character Setup
000010C8                           113  * Description   : Size of Player and Enemy and properties
000010C8                           114  * of these characters e.g Starting Positions and Sizes
000010C8                           115  *-----------------------------------------------------------
000010C8  =00000014                116  PLYR_W_INIT EQU         20          ; Players initial Width
000010C8  =00000014                117  PLYR_H_INIT EQU         20          ; Players initial Height (changed to be square)
000010C8                           118  
000010C8  =00000000                119  PLYR_DFLT_V EQU         00          ; Default Player Velocity
000010C8  =FFFFFFEC                120  PLYR_JUMP_V EQU         -20          ; Player Jump Velocity
000010C8  =00000002                121  PLYR_DFLT_G EQU         02          ; Player Default Gravity
000010C8                           122  
000010C8  =00000001                123  GND_TRUE    EQU         01          ; Player on Ground True
000010C8  =00000000                124  GND_FALSE   EQU         00          ; Player on Ground False
000010C8                           125  
000010C8  =00000000                126  RUNNING_INDEX   EQU         00          ; Player Run Sound Index  
000010C8  =00000001                127  JMP_INDEX   EQU         01          ; Player Jump Sound Index  
000010C8  =00000002                128  OPPS_INDEX  EQU         02          ; Player Opps Sound Index
000010C8                           129  
000010C8  =00000012                130  ENMY_W_INIT EQU         18          ; Enemy initial Width
000010C8  =00000010                131  ENMY_H_INIT EQU         16          ; Enemy initial Height
000010C8                           132  
000010C8                           133  *-----------------------------------------------------------
000010C8                           134  * Subroutine    : Draw Player
000010C8                           135  * Description   : Draw Player Square
000010C8                           136  *-----------------------------------------------------------
000010C8                           137  DRAW_PLAYER:
000010C8                           138      ; Set Pixel Colors
000010C8  223C 0062F2F3            139      MOVE.L  #YELLOW,     D1          ; Set Background color
000010CE  103C 0050                140      MOVE.B  #80,        D0          ; Task for Background Color
000010D2  4E4F                     141      TRAP    #15                     ; Trap (Perform action)
000010D4                           142  
000010D4                           143      ; Set X, Y, Width and Height
000010D4  2239 000012B2            144      MOVE.L  PLAYER_X,   D1          ; X
000010DA  2439 000012B6            145      MOVE.L  PLAYER_Y,   D2          ; Y
000010E0  2639 000012B2            146      MOVE.L  PLAYER_X,   D3
000010E6  0683 00000014            147      ADD.L   #PLYR_W_INIT,   D3      ; Width
000010EC  2839 000012B6            148      MOVE.L  PLAYER_Y,   D4 
000010F2  0684 00000014            149      ADD.L   #PLYR_H_INIT,   D4      ; Height
000010F8                           150      
000010F8                           151      ; Draw Player
000010F8  103C 005B                152      MOVE.B  #91,        D0          ; Draw Player
000010FC  4E4F                     153      TRAP    #15                     ; Trap (Perform action)
000010FE  4E75                     154      RTS                             ; Return to subroutine
00001100                           155  
00001100                           156  *-----------------------------------------------------------
00001100                           157  * Subroutine    : Draw Enemy
00001100                           158  * Description   : Draw Enemy Triangle
00001100                           159  *-----------------------------------------------------------
00001100                           160  DRAW_ENEMY:
00001100                           161      ; Set Pixel Colors
00001100  223C 00FFFF00            162      MOVE.L  #BLUE,       D1          ; Set Background color
00001106  103C 0050                163      MOVE.B  #80,        D0          ; Task for Background Color
0000110A  4E4F                     164      TRAP    #15                     ; Trap (Perform action)
0000110C                           165  
0000110C                           166      ; Set X, Y, Width and Height
0000110C  2239 000012CA            167      MOVE.L  ENEMY_X,    D1          ; X
00001112  2439 000012CE            168      MOVE.L  ENEMY_Y,    D2          ; Y
00001118  2639 000012CA            169      MOVE.L  ENEMY_X,    D3
0000111E  0683 00000012            170      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001124  2839 000012CE            171      MOVE.L  ENEMY_Y,    D4 
0000112A  0684 00000010            172      ADD.L   #ENMY_H_INIT,   D4      ; Height
00001130                           173      
00001130                           174      ; Draw Enemy as Triangle
00001130  103C 0058                175      MOVE.B  #88,        D0          ; Draw Enemy as Triangle
00001134  4E4F                     176      TRAP    #15                     ; Trap (Perform action)
00001136  4E75                     177      RTS                             ; Return to subroutine
00001138                           178  
00001138                           179  *-----------------------------------------------------------
00001138                           180  * Subroutine    : Collision Check
00001138                           181  * Description   : Axis-Aligned Bounding Box Collision Detection
00001138                           182  * Algorithm checks for overlap on the 4 sides of the Player and 
00001138                           183  * Enemy rectangles
00001138                           184  * PLAYER_X <= ENEMY_X + ENEMY_W &&
00001138                           185  * PLAYER_X + PLAYER_W >= ENEMY_X &&
00001138                           186  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
00001138                           187  * PLAYER_H + PLAYER_Y >= ENEMY_Y
00001138                           188  *-----------------------------------------------------------
00001138                           189  CHECK_COLLISIONS:
00001138  4281                     190      CLR.L   D1                      ```assembly
0000113A                           191      ; Clear D1
0000113A  4282                     192      CLR.L   D2                      ; Clear D2
0000113C                           193  PLAYER_X_LTE_TO_ENEMY_X_PLUS_W:
0000113C  2239 000012B2            194      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001142  2439 000012CA            195      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00001148  D4B8 0012                196      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000114C  B481                     197      CMP.L   D1,         D2          ; Do the Overlap ?
0000114E  6F00 0006                198      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  ; Less than or Equal ?
00001152  6000 0044                199      BRA     COLLISION_CHECK_DONE    
00001156                           200  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X:     ; Check player is not  
00001156  D2B8 0014                201      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
0000115A  2439 000012CA            202      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00001160  B481                     203      CMP.L   D1,         D2          ; Do they Overlap ?
00001162  6C00 0006                204      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
00001166  6000 0030                205      BRA     COLLISION_CHECK_DONE    ; If not no collision   
0000116A                           206  PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H:     
0000116A  2239 000012B6            207      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00001170  2439 000012CE            208      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
00001176  D4B8 0010                209      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
0000117A  B481                     210      CMP.L   D1,         D2          ; Do they Overlap ?
0000117C  6F00 0006                211      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  ; Less than or Equal
00001180  6000 0016                212      BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001184                           213  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
00001184  D2B8 0014                214      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001188  2439 000012CE            215      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
0000118E  B481                     216      CMP.L   D1,         D2          ; Do they Overlap ?
00001190  6C00 001A                217      BGE     COLLISION               ; Collision !
00001194  6000 0002                218      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001198                           219      
00001198                           220  COLLISION_CHECK_DONE:               ; No Collision Update points
Line 221 ERROR: Undefined symbol
00001198  0681 004DBD16            221      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
0000119E  D2B9 000012BA            222      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
000011A4  23C1 000012BA            223      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
000011AA  4E75                     224      RTS                             ; Return to subroutine
000011AC                           225  
000011AC                           226  COLLISION:
Line 227 ERROR: Undefined symbol
000011AC  6100 AB68                227      BSR     PLAY_OPPS               ; Play Opps Wav
000011B0  23FC 00000000 000012BA   228      MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
000011BA  6100 0020                229      BSR     END_GAME
000011BE  4E75                     230      RTS                             ; Return to subroutine
000011C0                           231  
000011C0                           232  *-----------------------------------------------------------
000011C0                           233  * Subroutine    : EXIT
000011C0                           234  * Description   : Exit message and End Game
000011C0                           235  *----------------------------------------------------------
000011C0                           236  EXIT:
000011C0                           237      ; Show if Exiting is Running
000011C0  103C 000B                238      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011C4  323C 4004                239      MOVE.W  #$4004,     D1          ; Col 40, Row 1
000011C8  4E4F                     240      TRAP    #15                     ; Trap (Perform action)
000011CA  43F9 0000123C            241      LEA     EXIT_MSG,   A1          ; Exit
000011D0  303C 000D                242      MOVE    #13,        D0          ; No Line feed
000011D4  4E4F                     243      TRAP    #15                     ; Trap (Perform action)
000011D6  103C 0009                244      MOVE.B  #TC_EXIT,   D0          ; Exit Code
000011DA  4E4F                     245      TRAP    #15                     ; Trap (Perform action)
000011DC                           246      
000011DC                           247  END_GAME:
000011DC                           248      ; Add logic to end the game, such as displaying an end game message and halting the processor
000011DC  6100 0008                249      BSR     DISPLAY_END_GAME_MESSAGE
000011E0  103C 0009                250      MOVE.B  #TC_EXIT,   D0          ; Exit Code
000011E4  4E4F                     251      TRAP    #15                     ; Trap (Perform action)
000011E6                           252      
000011E6                           253  DISPLAY_END_GAME_MESSAGE:
000011E6                           254      ; Add logic to display an end game message
000011E6  103C 000B                255      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011EA  323C 4004                256      MOVE.W  #$4004,     D1          ; Col 40, Row 1
000011EE  4E4F                     257      TRAP    #15                     ; Trap (Perform action)
000011F0  43F9 000013E4            258      LEA     END_GAME_MSG,   A1      ; End Game Message
000011F6  303C 000D                259      MOVE    #13,        D0          ; No Line feed
000011FA  4E4F                     260      TRAP    #15                     ; Trap (Perform action) 
000011FC  4E75                     261      RTS
000011FE  FFFF FFFF                262      SIMHALT
00001202                           263  *-----------------------------------------------------------
00001202                           264  * Section       : Messages
00001202                           265  * Description   : Messages to Print on Console, names should be
00001202                           266  * self documenting
00001202                           267  *-----------------------------------------------------------
00001202= 59 6F 75 72 20 53 ...    268  SCORE_MSG       DC.B    'Your Score : ', 0       ; Score Message
00001210= 00                       269  KEYCODE_MSG     DC.B    '', 0     ; Keycode Message
00001211= 4A 75 6D 70 2E 2E ...    270  JUMP_MSG        DC.B    'Jump....', 0       ; Jump Message
0000121A                           271  
0000121A= 44 6F 6E 74 20 43 ...    272  IDLE_MSG        DC.B    'Dont Crash lol', 0       ; Idle Message
00001229= 00                       273  UPDATE_MSG      DC.B    '', 0     ; Update Message
0000122A= 00                       274  DRAW_MSG        DC.B    '', 0     ; Draw Message
0000122B                           275  
0000122B= 58 3A 00                 276  X_MSG           DC.B    'X:', 0             ; X Position Message
0000122E= 59 3A 00                 277  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
00001231= 56 3A 00                 278  V_MSG           DC.B    'V:', 0             ; Velocity Position Message
00001234= 47 3A 00                 279  G_MSG           DC.B    'G:', 0             ; Gravity Position Message
00001237= 47 4E 44 3A 00           280  GND_MSG         DC.B    'GND:', 0           ; On Ground Position Message
0000123C                           281  
0000123C= 55 6E 6C 75 63 6B ...    282  EXIT_MSG        DC.B    'Unluckyyyyy', 0    ; Exit Message
00001248= 5A 5A 5A 5A 5A 5A ...    283  LINE_ROAD       DC.B    'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ',0
000012A9                           284  
000012A9                           285  *-----------------------------------------------------------
000012A9                           286  * Section       : Graphic Colors
000012A9                           287  * Description   : Screen Pixel Color
000012A9                           288  *-----------------------------------------------------------
000012A9  =0062F2F3                289  YELLOW           EQU     $62f2f3
000012A9  =00FFFF00                290  BLUE             EQU     $FFFF00
000012A9                           291  
000012A9                           292  *-----------------------------------------------------------
000012A9                           293  * Section       : Screen Size
000012A9                           294  * Description   : Screen Width and Height
000012A9                           295  *-----------------------------------------------------------
000012AA                           296  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
000012AC                           297  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
000012AE                           298  
000012AE                           299  *-----------------------------------------------------------
000012AE                           300  * Section       : Keyboard Input
000012AE                           301  * Description   : Used for storing Keypresses
000012AE                           302  *-----------------------------------------------------------
000012AE                           303  THE_CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
000012B2                           304  
000012B2                           305  *-----------------------------------------------------------
000012B2                           306  * Section       : Character Positions
000012B2                           307  * Description   : Player and Enemy Position Memory Locations
000012B2                           308  *-----------------------------------------------------------
000012B2                           309  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
000012B6                           310  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
000012BA                           311  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
000012BE                           312  
000012BE                           313  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
000012C2                           314  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
000012C6                           315  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
000012CA                           316  
000012CA                           317  ENEMY_X         DS.L    01  ; Reserve Space for Enemy X Position
000012CE                           318  ENEMY_Y         DS.L    01  ; Reserve Space for Enemy Y Position
000012D2                           319  
000012D2                           320  ENEMY_X2         DS.L    01  ; Reserve Space for Enemy X Position
000012D6                           321  ENEMY_Y2         DS.L    01  ; Reserve Space for Enemy Y Position
000012DA                           322  
000012DA                           323  *-----------------------------------------------------------
000012DA                           324  * Section       : Sounds
000012DA                           325  * Description   : Sound files, which are then loaded and given
000012DA                           326  * an address in memory, they take a longtime to process and play
000012DA                           327  * so keep the files small. Used https://voicemaker.in/ to 
000012DA                           328  * generate and Audacity to convert MP3 to WAV
000012DA                           329  *-----------------------------------------------------------
000012DA= 62 72 75 68 2E 77 ...    330  JUMP_WAV        DC.B    'bruh.wav',0        ; Jump Sound
000012E3= 6D 61 63 6F 2E 77 ...    331  RUN_WAV         DC.B    'maco.wav',0         ; Run Sound
000012EC= 62 75 7A 7A 65 72 ...    332  OPPS_WAV        DC.B    'buzzer.wav',0        ; Collision Opps
000012F7                           333  
000012F7                           334  *-----------------------------------------------------------
000012F7                           335  * Section       : Messages
000012F7                           336  * Description   : Messages to Print on Console, names should be
000012F7                           337  * self documenting
000012F7                           338  *-----------------------------------------------------------
000012F7= 2D 2D 2D 2D 2D 57 ...    339  STARTER_MSG      DC.B    '-----Welcome to My Game!----', 0   ; Starter Screen Message
00001314= 2D 2D 50 72 65 73 ...    340  INSTRUCTION_1    DC.B    '--Press the spacebar to jump and escape to exit.----', 0   ; Instruction 1
00001349= 2D 2D 2D 2D 54 72 ...    341  INSTRUCTION_2    DC.B    '----Try to avoid the obstacles and have fun!---', 0   ; Instruction 2
00001379= 2D 2D 2D 2D 50 72 ...    342  INSTRUCTION_3    DC.B    '----Press any key to start the game.-------', 0   ; Instruction 3
000013A5= 2D 2D 2D 50 52 45 ...    343  INSTRUCTION_4    DC.B    '---PRESS ANY KEY OTHER THAN SPACE FOR MUSIC--',0 ; Instruction 4
000013D3= 2D 2D 42 65 73 74 ...    344  INSTRUCTION_5    DC.B    '--Best of luck--',0  ; Instruction 5
000013E4= 47 61 6D 65 20 4F ...    345  END_GAME_MSG     DC.B    'Game Over - Collision Detected', 0    ; End Game Message
00001403                           346      END    START        ; last line of source ```assembly

6 errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BLUE                FFFF00
CHECK_COLLISIONS    1138
COLLISION           11AC
COLLISION_CHECK_DONE  1198
DISPLAY_END_GAME_MESSAGE  11E6
DRAW_ENEMY          1100
DRAW_MSG            122A
DRAW_PLAYER         10C8
END_GAME            11DC
END_GAME_MSG        13E4
ENEMY_X             12CA
ENEMY_X2            12D2
ENEMY_Y             12CE
ENEMY_Y2            12D6
ENMY_H_INIT         10
ENMY_W_INIT         12
EXIT                11C0
EXIT_MSG            123C
GND_FALSE           0
GND_MSG             1237
GND_TRUE            1
G_MSG               1234
IDLE_MSG            121A
INSTRUCTION_1       1314
INSTRUCTION_2       1349
INSTRUCTION_3       1379
INSTRUCTION_4       13A5
INSTRUCTION_5       13D3
JMP_INDEX           1
JUMP_MSG            1211
JUMP_WAV            12DA
KEYCODE_MSG         1210
LINE_ROAD           1248
OPPS_INDEX          2
OPPS_WAV            12EC
PLAYER_SCORE        12BA
PLAYER_X            12B2
PLAYER_X_LTE_TO_ENEMY_X_PLUS_W  113C
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  1156
PLAYER_Y            12B6
PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  116A
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  1184
PLYR_DFLT_G         2
PLYR_DFLT_V         0
PLYR_GRAVITY        12C2
PLYR_H_INIT         14
PLYR_JUMP_V         FFFFFFEC
PLYR_ON_GND         12C6
PLYR_VELOCITY       12BE
PLYR_W_INIT         14
RUNNING_INDEX       0
RUN_WAV             12E3
SCORE_MSG           1202
SCREEN_H            12AC
SCREEN_W            12AA
START               1000
STARTER_MSG         12F7
STARTER_SCREEN      100C
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
THE_CURRENT_KEY     12AE
UPDATE_MSG          1229
V_MSG               1231
WAIT_LOOP           10B8
X_MSG               122B
YELLOW              62F2F3
Y_MSG               122E
